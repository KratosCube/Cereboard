@page "/board/{Id:int}"
@using Cereboard.Components.Dialogs
@using Cereboard.Shared.Models
@inject HttpClient Http
@inject IJSRuntime JS
@inject IDialogService DialogService
@implements IDisposable

<MudText Typo="Typo.h3" Class="mb-2">@board?.Name</MudText>
<MudText Typo="Typo.body1" Class="mb-4">@board?.Description</MudText>

@if (board == null)
{
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}
else if (board.Columns != null)
{
                               <div class="d-flex gap-4 overflow-auto py-4" @ondrop="OnColumnDrop" @ondragover:preventDefault id="columnContainer">
        @foreach (var column in board.Columns.OrderBy(c => c.Order))
        {
                <div class="kanban-column" style="min-width: 300px; border-radius: 8px; overflow: hidden;"
                     @key="column.Id"
                     id="column-@column.Id">

                    <!-- Column header - this should be draggable -->
                    <div class="column-header d-flex justify-space-between align-center pa-3" 
                         style="background-color: @column.Color; cursor: move;"
                         id="column-header-@column.Id">
                        <div class="d-flex align-center">
                            <MudIcon Icon="@Icons.Material.Filled.DragIndicator" Class="mr-2 mud-text-secondary" />
                            <MudText Typo="Typo.h6" Style="font-weight: 500;">@column.Name</MudText>
                        </div>
                        <div>
                            <MudIconButton Icon="@Icons.Material.Filled.Edit" 
                                         Size="Size.Small" 
                                         OnClick="@(() => EditColumn(column))" />
                        </div>
                    </div>

                    <!-- Column content for tasks -->
                    <div class="column-content pa-3" style="background-color: @GetLighterColor(column.Color); min-height: 300px;"
                         @ondragenter="@(e => OnColumnDragEnter(e, column))"
                         @ondrop="@(e => OnTaskDrop(e, column))"
                         id="column-content-@column.Id">

                        <!-- Tasks go here -->
                    @foreach (var task in column.Tasks.OrderBy(t => t.Order))
                    {
                                <div class="task-card mb-3"
                                     id="task-@task.Id"
                                     @onclick="@(() => OpenTaskDetail(task))">
                                    <MudText Typo="Typo.h6">@task.Title</MudText>
                                    <MudText Typo="Typo.body2">@task.Description</MudText>
                            @if (task.DueDate.HasValue)
                            {
                                            <MudText Class="mt-2" Typo="Typo.caption">
                                                Termín: @task.DueDate.Value.ToShortDateString()
                                            </MudText>
                            }
                                </div>
                    }

                        <!-- Add task button or form -->
                    @if (showNewTaskInput && newTaskColumnId == column.Id)
                    {
                                <div class="pa-2 mt-3 d-flex flex-column gap-2">
                                    <MudTextField @bind-Value="newTaskTitle" Label="Název úkolu" Variant="Variant.Outlined" Immediate="true" />
                                    <div class="d-flex gap-2">
                                        <MudButton Color="Color.Primary" OnClick="SaveNewTask">Přidat</MudButton>
                                        <MudButton Color="Color.Default" OnClick="CancelNewTask">Zrušit</MudButton>
                                    </div>
                                </div>
                    }
                    else
                    {
                                <MudButton FullWidth="true"
                                         StartIcon="@Icons.Material.Filled.Add"
                                         Color="Color.Primary"
                                         Variant="Variant.Text"
                                         OnClick="@(() => ShowNewTaskInput(column.Id))"
                                         Class="mt-3">
                                    Přidat úkol
                                </MudButton>
                    }
                    </div>
                </div>
        }

        <!-- Add column button and new column form -->
        @if (showNewColumnInput)
        {
                <div class="pa-4" style="min-width: 300px; background-color: white; border-radius: 8px;">
                    <div class="d-flex flex-column gap-2">
                        <MudTextField @bind-Value="newColumnName" Label="Název sloupce" Variant="Variant.Outlined" Immediate="true" />
                        <div class="d-flex gap-2">
                            <MudButton Color="Color.Primary" OnClick="SaveNewColumn">Přidat</MudButton>
                            <MudButton Color="Color.Default" OnClick="CancelNewColumn">Zrušit</MudButton>
                        </div>
                    </div>
                </div>
        }

        <div style="min-width: 100px;" class="d-flex align-center justify-center">
            <MudButton Variant="Variant.Outlined"
                     StartIcon="@Icons.Material.Filled.Add"
                     Color="Color.Default"
                     OnClick="ShowNewColumnInput">
                Přidat sloupec
            </MudButton>
        </div>
    </div>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private Board? board;
    private int dragSourceColumnId;
    private int dragEnterColumnId;
    private int dragTaskId;
    private IJSObjectReference? dragDropModule;

    // For adding tasks
    private bool showNewTaskInput = false;
    private int newTaskColumnId = 0;
    private string newTaskTitle = "";

    // For adding columns
    private bool showNewColumnInput = false;
    private string newColumnName = "";
    private bool isDraggingColumn = false;
    protected override async Task OnInitializedAsync()
    {
        await LoadBoardData();
    }



    private async Task LogDragStart(string type, int id)
    {
        await JS.InvokeVoidAsync("console.log", $"==== DRAG START: {type} ID: {id} ====");
        await JS.InvokeVoidAsync("console.log", $"Current state: dragTaskId={dragTaskId}, dragSourceColumnId={dragSourceColumnId}, isDraggingColumn={isDraggingColumn}");
    }

    private async Task LogDragEnd(string type, int id)
    {
        await JS.InvokeVoidAsync("console.log", $"==== DRAG END: {type} ID: {id} ====");
        await JS.InvokeVoidAsync("console.log", $"Current state: dragTaskId={dragTaskId}, dragSourceColumnId={dragSourceColumnId}, isDraggingColumn={isDraggingColumn}");
    }

    private async Task LogDrop(string type, int targetId)
    {
        await JS.InvokeVoidAsync("console.log", $"==== DROP: {type} TARGET: {targetId} ====");
        await JS.InvokeVoidAsync("console.log", $"Current state: dragTaskId={dragTaskId}, dragSourceColumnId={dragSourceColumnId}, isDraggingColumn={isDraggingColumn}");
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                // Load JS module for drag-drop support
                dragDropModule = await JS.InvokeAsync<IJSObjectReference>("import", "./js/dragdrop.js?v=" + DateTime.Now.Ticks);

                // Initialize drag-drop handling
                await dragDropModule.InvokeVoidAsync("enableDragDrop");

                Console.WriteLine("Drag and drop initialized");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error initializing drag-drop: {ex.Message}");
                await JS.InvokeVoidAsync("console.error", "Error initializing drag-drop:", ex);
            }
        }
    }

    public void Dispose()
    {
        if (dragDropModule != null)
        {
            try
            {
                dragDropModule.DisposeAsync();
            }
            catch { }
        }
    }
    private async Task ResetDragState()
    {
        // Reset all state variables
        isDraggingColumn = false;
        dragSourceColumnId = 0;
        dragEnterColumnId = 0;
        dragTaskId = 0;

        // Remove visual styling
        await JS.InvokeVoidAsync("eval", "document.querySelectorAll('.dragging-column').forEach(function(el) { el.classList.remove('dragging-column'); })");
        await JS.InvokeVoidAsync("eval", "document.querySelectorAll('.dragging-task').forEach(function(el) { el.classList.remove('dragging-task'); })");
        await JS.InvokeVoidAsync("eval", "document.querySelectorAll('.column-drop-target').forEach(function(el) { el.classList.remove('column-drop-target'); })");

        // Ensure column headers are draggable
        await JS.InvokeVoidAsync("eval", "document.querySelectorAll('.column-header').forEach(function(el) { el.setAttribute('draggable', 'true'); })");

        // Log the reset
        await JS.InvokeVoidAsync("console.log", "Drag state reset, column headers should be draggable now");
    }
    private async Task LoadBoardData()
    {
        try
        {
            board = await Http.GetFromJsonAsync<Board>($"api/boards/{Id}");
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.error", ex.Message);
        }
    }
    private async Task OnDragEnd()
    {
        try
        {
            await JS.InvokeVoidAsync("console.log", "==== DRAG END ====");
            await ResetDragState();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.error", "Error in drag end:", ex.Message);
        }
    }
    // Helper method to get a lighter shade of the column color
    private string GetLighterColor(string hexColor)
    {
        if (string.IsNullOrEmpty(hexColor) || hexColor == "#f5f5f5" || hexColor == "#eeeeee")
            return "#f8f8f8";

        try
        {
            // Convert hex to RGBA with lower opacity
            return hexColor + "20"; // 20 = 12.5% opacity in hex
        }
        catch
        {
            return "#f8f8f8";
        }
    }

    // Column drag and drop handlers
    private async Task OnColumnDragStart(DragEventArgs args, Column column)
    {
        try
        {
            // Test if drag events are working properly
            await JS.InvokeVoidAsync("console.log", "Column drag start triggered for column: " + column.Name);

            // Explicitly set column drag state
            isDraggingColumn = true;
            dragSourceColumnId = column.Id;

            // Clear task drag state
            dragTaskId = 0;

            // Log the drag start
            await JS.InvokeVoidAsync("console.log", "==== DRAG START: Column ID: " + column.Id + " ====");
            await JS.InvokeVoidAsync("console.log", "Current state: dragTaskId=" + dragTaskId + ", dragSourceColumnId=" + dragSourceColumnId + ", isDraggingColumn=" + isDraggingColumn);

            // Add visual cue to the entire column
            await JS.InvokeVoidAsync("eval", "var el = document.querySelector('#column-" + column.Id + "'); if(el) el.classList.add('dragging-column');");

            // Log the event data
            await JS.InvokeVoidAsync("console.log", "Column drag event fired successfully");
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.error", "Error in column drag start:", ex.Message);
        }
    }
    private void PreventColumnDrag(PointerEventArgs args, string selector)
    {
        // Use JS to make elements temporarily non-draggable when clicking on tasks
        JS.InvokeVoidAsync("eval", $@"
        document.querySelectorAll('{selector}').forEach(el => {{
            el.draggable = false;
            setTimeout(() => el.draggable = true, 100);
        }});
    ");
    }
    private async Task OnColumnDragEnter(DragEventArgs args, Column column)
    {
        try
        {
            if (dragDropModule != null)
            {
                await dragDropModule.InvokeVoidAsync("onColumnDragEnter", column.Id);
            }

            dragEnterColumnId = column.Id;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in column drag enter: {ex.Message}");
        }
    }

    private async Task OnColumnDrop(DragEventArgs args)
    {
        try
        {
            if (dragDropModule == null) return;

            // Check if a column is being dragged
            string dragType = await dragDropModule.InvokeAsync<string>("getDragData", "dragType");

            if (dragType != "column")
            {
                Console.WriteLine("Ignoring column drop - not a column drag operation");
                return;
            }

            // Get column IDs
            int sourceId = await dragDropModule.InvokeAsync<int>("getDragData", "columnId");
            int targetId = await dragDropModule.InvokeAsync<int>("getDragData", "targetColumnId");

            if (sourceId <= 0 || targetId <= 0 || sourceId == targetId)
                return;

            // Find columns
            var sourceColumn = board.Columns.FirstOrDefault(c => c.Id == sourceId);
            var targetColumn = board.Columns.FirstOrDefault(c => c.Id == targetId);

            if (sourceColumn != null && targetColumn != null)
            {
                // Swap orders
                int sourceOrder = sourceColumn.Order;
                int targetOrder = targetColumn.Order;

                if (sourceOrder < targetOrder)
                {
                    // Moving right
                    foreach (var col in board.Columns.Where(c => c.Order > sourceOrder && c.Order <= targetOrder))
                    {
                        col.Order--;
                    }
                    sourceColumn.Order = targetOrder;
                }
                else
                {
                    // Moving left
                    foreach (var col in board.Columns.Where(c => c.Order < sourceOrder && c.Order >= targetOrder))
                    {
                        col.Order++;
                    }
                    sourceColumn.Order = targetOrder;
                }
            }

            // Update UI
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in column drop: {ex.Message}");
        }
    }

    // Task drag and drop handlers
    private async Task OnTaskDragStart(DragEventArgs args, TaskItem task)
    {
        try
        {
            // Make sure column headers aren't draggable during task drag
            await JS.InvokeVoidAsync("eval", @"
            document.querySelectorAll('.column-header').forEach(el => {
                el.setAttribute('draggable', 'false');
            });
        ");

            // Clear column drag state
            isDraggingColumn = false;
            dragSourceColumnId = 0;

            // Set task drag state
            dragTaskId = task.Id;

            // Log the drag start
            await JS.InvokeVoidAsync("console.log", $"==== DRAG START: Task ID: {task.Id} ====");
            await JS.InvokeVoidAsync("console.log", $"Current state: dragTaskId={dragTaskId}, dragSourceColumnId={dragSourceColumnId}, isDraggingColumn={isDraggingColumn}");

            // Add visual cue
            await JS.InvokeVoidAsync("eval", $"document.querySelector('#task-{task.Id}')?.classList.add('dragging-task');");

            args.DataTransfer.EffectAllowed = "move";
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.error", "Error in task drag start:", ex.Message);
        }
    }

    private async Task OnTaskDrop(DragEventArgs args, Column targetColumn)
    {
        try
        {
            if (dragDropModule == null) return;

            // Check if a task is being dragged
            bool isTaskDrag = await dragDropModule.InvokeAsync<bool>("isTaskBeingDragged");

            if (!isTaskDrag)
            {
                Console.WriteLine("Ignoring task drop - not a task drag operation");
                return;
            }

            // Get the task ID
            int taskId = await dragDropModule.InvokeAsync<int>("getDragData", "taskId");

            if (taskId <= 0)
            {
                Console.WriteLine("Invalid task ID in drop");
                return;
            }

            // Find the task and source column
            TaskItem? draggedTask = null;
            Column? sourceColumn = null;

            foreach (var col in board.Columns)
            {
                var task = col.Tasks.FirstOrDefault(t => t.Id == taskId);
                if (task != null)
                {
                    sourceColumn = col;
                    draggedTask = task;
                    break;
                }
            }

            // Skip if already in target column or not found
            if (sourceColumn == null || draggedTask == null || sourceColumn.Id == targetColumn.Id)
                return;

            // Move the task
            sourceColumn.Tasks.Remove(draggedTask);
            draggedTask.ColumnId = targetColumn.Id;
            draggedTask.Order = targetColumn.Tasks.Any() ? targetColumn.Tasks.Max(t => t.Order) + 1 : 1;
            targetColumn.Tasks.Add(draggedTask);

            // Update UI
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in task drop: {ex.Message}");
        }
    }

    private async Task EditColumn(Column column)
    {
        var parameters = new DialogParameters { ["column"] = column };
        var dialog = await DialogService.ShowAsync<ColumnEditDialog>("Upravit sloupec", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            // The column object is directly updated
            StateHasChanged();

            // In a real app, send update to server
            // await Http.PutAsJsonAsync($"api/columns/{column.Id}", column);
        }
    }

    private async Task OpenTaskDetail(TaskItem task)
    {
        var parameters = new DialogParameters { ["task"] = task };

        try
        {
            var dialog = await DialogService.ShowAsync<TaskDetailDialog>("Detail úkolu", parameters);
            var result = await dialog.Result;

            if (!result.Canceled)
            {
                if (result.Data is string && (string)result.Data == "delete")
                {
                    // Delete task
                    var column = board?.Columns.FirstOrDefault(c => c.Id == task.ColumnId);
                    column?.Tasks.Remove(task);
                }
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.error", "Chyba při otevírání dialogu:", ex.Message);
        }
    }

    private void ShowNewTaskInput(int columnId)
    {
        showNewTaskInput = true;
        newTaskColumnId = columnId;
        newTaskTitle = "";
    }

    private void SaveNewTask()
    {
        if (string.IsNullOrWhiteSpace(newTaskTitle) || board == null) return;

        var column = board.Columns.FirstOrDefault(c => c.Id == newTaskColumnId);
        if (column != null)
        {
            // Find max task ID across all columns
            int maxId = 0;
            foreach (var col in board.Columns)
            {
                foreach (var t in col.Tasks)
                {
                    if (t.Id > maxId) maxId = t.Id;
                }
            }

            var task = new TaskItem
                {
                    Id = maxId + 1,
                    Title = newTaskTitle,
                    Description = "",
                    ColumnId = newTaskColumnId,
                    Order = column.Tasks.Any() ? column.Tasks.Max(t => t.Order) + 1 : 1
                };

            column.Tasks.Add(task);

            // Reset UI state
            showNewTaskInput = false;
            newTaskColumnId = 0;
            newTaskTitle = "";
        }
    }

    private void CancelNewTask()
    {
        showNewTaskInput = false;
        newTaskColumnId = 0;
        newTaskTitle = "";
    }

    private void ShowNewColumnInput()
    {
        showNewColumnInput = true;
        newColumnName = "";
    }

    private void SaveNewColumn()
    {
        if (string.IsNullOrWhiteSpace(newColumnName) || board == null) return;

        // Find max column ID
        int maxId = board.Columns.Any() ? board.Columns.Max(c => c.Id) + 1 : 1;

        var column = new Column
            {
                Id = maxId,
                Name = newColumnName,
                BoardId = Id,
                Order = board.Columns.Any() ? board.Columns.Max(c => c.Order) + 1 : 1,
                Color = "#f5f5f5", // Default color
                Tasks = new List<TaskItem>()
            };

        board.Columns.Add(column);

        showNewColumnInput = false;
        newColumnName = "";
    }

    private void CancelNewColumn()
    {
        showNewColumnInput = false;
        newColumnName = "";
    }
}
@page "/board/{Id:int}"
@using Cereboard.Components.Dialogs
@using Cereboard.Shared.Models
@inject HttpClient Http
@inject IJSRuntime JS
@inject IDialogService DialogService
@implements IDisposable

<MudText Typo="Typo.h3" Class="mb-2">@board?.Name</MudText>
<MudText Typo="Typo.body1" Class="mb-4">@board?.Description</MudText>

@if (board == null)
{
                <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}
else if (board.Columns != null)
{
                <div class="d-flex gap-4 overflow-auto py-4 align-items-start" @ondrop="OnColumnDrop" @ondragover:preventDefault id="columnContainer">
        @foreach (var column in board.Columns.OrderBy(c => c.Order))
        {
                                            <div class="kanban-column" 
                             style="min-width: 300px; border-radius: 8px; overflow: hidden; display: flex; flex-direction: column;"
                             @key="column.Id"
                             id="column-@column.Id">

                                        <!-- Column header - this should be draggable -->
                                               <div class="column-header d-flex justify-space-between align-center pa-3" 
                                 style="background-color: @column.Color; cursor: move; width: 100%;"
                                 id="column-header-@column.Id"
                                 draggable="true"
                                 @ondragstart="@(e => OnColumnDragStart(e, column))"
                                 @ondragend="OnDragEnd">
                                            <div class="d-flex align-center">
                                                <MudIcon Icon="@Icons.Material.Filled.DragIndicator" Class="mr-2 mud-text-secondary" />
                                                <MudText Typo="Typo.h6" Style="font-weight: 500;">@column.Name</MudText>
                                            </div>
                                            <div>
                                                <MudIconButton Icon="@Icons.Material.Filled.Edit" 
                                                             Size="Size.Small" 
                                                             OnClick="@(() => EditColumn(column))" />
                                            </div>
                                        </div>

                                        <!-- Column content for tasks - Modified to use adaptive height -->
                                                 <div class="column-content pa-3" 
                                 style="background-color: @GetLighterColor(column.Color); width: 100%;"
                                 @ondragenter="@(e => OnColumnDragEnter(e, column))"
                @ondragover:preventDefault
                                 @ondrop="@(e => OnTaskDrop(e, column))"
                                 id="column-content-@column.Id">

                                            <!-- Tasks go here -->
                    @foreach (var task in column.Tasks.OrderBy(t => t.Order))
                    {
                                                            <div class="task-card mb-3"
                                                                 id="task-@task.Id"
                                                                 draggable="true"
                                                                 @ondragstart="@(e => OnTaskDragStart(e, task))"
                                                                 @ondragend="OnDragEnd"
                                                                 @onclick="@(() => OpenTaskDetail(task))">
                                                                <MudText Typo="Typo.h6">@task.Title</MudText>
                                                                <MudText Typo="Typo.body2">@task.Description</MudText>
                            @if (task.DueDate.HasValue)
                            {
                                                                                <MudText Class="mt-2" Typo="Typo.caption">
                                                                                    Termín: @task.DueDate.Value.ToShortDateString()
                                                                                </MudText>
                            }
                                                            </div>
                    }

                                            <!-- Add task button or form -->
                    @if (showNewTaskInput && newTaskColumnId == column.Id)
                    {
                                                            <div class="pa-2 mt-3 d-flex flex-column gap-2">
                                                                <MudTextField @bind-Value="newTaskTitle" Label="Název úkolu" Variant="Variant.Outlined" Immediate="true" />
                                                                <div class="d-flex gap-2">
                                                                    <MudButton Color="Color.Primary" OnClick="SaveNewTask">Přidat</MudButton>
                                                                    <MudButton Color="Color.Default" OnClick="CancelNewTask">Zrušit</MudButton>
                                                                </div>
                                                            </div>
                    }
                    else
                    {
                                                            <MudButton FullWidth="true"
                                                                     StartIcon="@Icons.Material.Filled.Add"
                                                                     Color="Color.Primary"
                                                                     Variant="Variant.Text"
                                                                     OnClick="@(() => ShowNewTaskInput(column.Id))"
                                                                     Class="mt-3">
                                                                Přidat úkol
                                                            </MudButton>
                    }
                                        </div>
                                    </div>
        }

                    <!-- Add column button and new column form -->
        @if (showNewColumnInput)
        {
                                    <div class="pa-4" style="min-width: 300px; background-color: white; border-radius: 8px;">
                                        <div class="d-flex flex-column gap-2">
                                            <MudTextField @bind-Value="newColumnName" Label="Název sloupce" Variant="Variant.Outlined" Immediate="true" />
                                            <div class="d-flex gap-2">
                                                <MudButton Color="Color.Primary" OnClick="SaveNewColumn">Přidat</MudButton>
                                                <MudButton Color="Color.Default" OnClick="CancelNewColumn">Zrušit</MudButton>
                                            </div>
                                        </div>
                                    </div>
        }

                    <div style="min-width: 100px;" class="d-flex align-center justify-center">
                        <MudButton Variant="Variant.Outlined"
                                 StartIcon="@Icons.Material.Filled.Add"
                                 Color="Color.Default"
                                 OnClick="ShowNewColumnInput">
                            Přidat sloupec
                        </MudButton>
                    </div>
                </div>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private Board? board;
    private int dragSourceColumnId;
    private int dragEnterColumnId;
    private int dragTaskId;
    private IJSObjectReference? dragDropModule;

    // For adding tasks
    private bool showNewTaskInput = false;
    private int newTaskColumnId = 0;
    private string newTaskTitle = "";

    // For adding columns
    private bool showNewColumnInput = false;
    private string newColumnName = "";
    private bool isDraggingColumn = false;
    protected override async Task OnInitializedAsync()
    {
        await LoadBoardData();
    }

    private async Task LogDragStart(string type, int id)
    {
        await JS.InvokeVoidAsync("console.log", $"==== DRAG START: {type} ID: {id} ====");
        await JS.InvokeVoidAsync("console.log", $"Current state: dragTaskId={dragTaskId}, dragSourceColumnId={dragSourceColumnId}, isDraggingColumn={isDraggingColumn}");
    }

    private async Task LogDragEnd(string type, int id)
    {
        await JS.InvokeVoidAsync("console.log", $"==== DRAG END: {type} ID: {id} ====");
        await JS.InvokeVoidAsync("console.log", $"Current state: dragTaskId={dragTaskId}, dragSourceColumnId={dragSourceColumnId}, isDraggingColumn={isDraggingColumn}");
    }

    private async Task LogDrop(string type, int targetId)
    {
        await JS.InvokeVoidAsync("console.log", $"==== DROP: {type} TARGET: {targetId} ====");
        await JS.InvokeVoidAsync("console.log", $"Current state: dragTaskId={dragTaskId}, dragSourceColumnId={dragSourceColumnId}, isDraggingColumn={isDraggingColumn}");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                // Load JS module for drag-drop support
                dragDropModule = await JS.InvokeAsync<IJSObjectReference>("import", "./js/dragdrop.js?v=" + DateTime.Now.Ticks);

                // Initialize drag-drop handling
                await dragDropModule.InvokeVoidAsync("enableDragDrop");

                // Setup draggable elements
                if (dragDropModule != null)
                {
                    await dragDropModule.InvokeVoidAsync("setupDraggableElements");

                    // Add this new function to dragdrop.js to ensure column heights adjust properly
                    await dragDropModule.InvokeVoidAsync("adjustColumnHeights");
                }

                Console.WriteLine("Drag and drop initialized");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error initializing drag-drop: {ex.Message}");
                await JS.InvokeVoidAsync("console.error", "Error initializing drag-drop:", ex.Message);
            }
        }
    }

    public void Dispose()
    {
        if (dragDropModule != null)
        {
            try
            {
                dragDropModule.DisposeAsync();
            }
            catch { }
        }
    }

    private async Task ResetDragState()
    {
        // Reset all state variables
        isDraggingColumn = false;
        dragSourceColumnId = 0;
        dragEnterColumnId = 0;
        dragTaskId = 0;

        // Remove visual styling
        await JS.InvokeVoidAsync("eval", "document.querySelectorAll('.dragging-column').forEach(function(el) { el.classList.remove('dragging-column'); })");
        await JS.InvokeVoidAsync("eval", "document.querySelectorAll('.dragging-task').forEach(function(el) { el.classList.remove('dragging-task'); })");
        await JS.InvokeVoidAsync("eval", "document.querySelectorAll('.column-drop-target').forEach(function(el) { el.classList.remove('column-drop-target'); })");

        // Ensure column headers are draggable
        await JS.InvokeVoidAsync("eval", "document.querySelectorAll('.column-header').forEach(function(el) { el.setAttribute('draggable', 'true'); })");

        // Log the reset
        await JS.InvokeVoidAsync("console.log", "Drag state reset, column headers should be draggable now");
    }

    private async Task LoadBoardData()
    {
        try
        {
            board = await Http.GetFromJsonAsync<Board>($"api/boards/{Id}");
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.error", ex.Message);
        }
    }

    private async Task OnDragEnd()
    {
        try
        {
            Console.WriteLine("Drag ended");

            if (dragDropModule != null)
            {
                await dragDropModule.InvokeVoidAsync("clearDragData");
                await dragDropModule.InvokeVoidAsync("clearDragEffects");

                // Adjust column heights after drag operations
                await dragDropModule.InvokeVoidAsync("adjustColumnHeights");
            }

            // Reset state variables
            isDraggingColumn = false;
            dragSourceColumnId = 0;
            dragEnterColumnId = 0;
            dragTaskId = 0;

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in drag end: {ex.Message}");
            await JS.InvokeVoidAsync("console.error", "Error in drag end:", ex.Message);
        }
    }

    // Helper method to get a lighter shade of the column color
    private string GetLighterColor(string hexColor)
    {
        if (string.IsNullOrEmpty(hexColor) || hexColor == "#f5f5f5" || hexColor == "#eeeeee")
            return "#f8f8f8";

        try
        {
            // Convert hex to RGBA with lower opacity
            return hexColor + "20"; // 20 = 12.5% opacity in hex
        }
        catch
        {
            return "#f8f8f8";
        }
    }

    // Column drag and drop handlers
    private async Task OnColumnDragStart(DragEventArgs args, Column column)
    {
        try
        {
            // Set state for Blazor
            isDraggingColumn = true;
            dragSourceColumnId = column.Id;
            dragTaskId = 0;

            // Log for debugging
            Console.WriteLine($"Column drag started: {column.Id}");

            // Set state for JavaScript
            if (dragDropModule != null)
            {
                await dragDropModule.InvokeVoidAsync("setDragData", "dragType", "column");
                await dragDropModule.InvokeVoidAsync("setDragData", "columnId", column.Id);

                // Add visual feedback
                await JS.InvokeVoidAsync("eval", $"document.querySelector('#column-{column.Id}').classList.add('dragging-column');");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in column drag start: {ex.Message}");
            await JS.InvokeVoidAsync("console.error", "Error in column drag start:", ex.Message);
        }
    }

    private void PreventColumnDrag(PointerEventArgs args, string selector)
    {
        // Use JS to make elements temporarily non-draggable when clicking on tasks
        JS.InvokeVoidAsync("eval", $@"
        document.querySelectorAll('{selector}').forEach(el => {{
            el.draggable = false;
            setTimeout(() => el.draggable = true, 100);
        }});
    ");
    }

    private async Task OnColumnDragEnter(DragEventArgs args, Column column)
    {
        try
        {
            if (dragDropModule != null)
            {
                string dragType = await dragDropModule.InvokeAsync<string>("getDragData", "dragType");

                if (dragType == "column")
                {
                    // Get source column ID
                    int sourceId = await dragDropModule.InvokeAsync<int>("getDragData", "columnId");

                    // Store target column ID in JS
                    await dragDropModule.InvokeVoidAsync("setDragData", "targetColumnId", column.Id);
                    await dragDropModule.InvokeVoidAsync("highlightColumnTarget", column.Id);

                    // Add this line to animate column shift
                    await dragDropModule.InvokeVoidAsync("animateColumnShift", sourceId, column.Id);

                    // Set state for Blazor
                    dragEnterColumnId = column.Id;

                    Console.WriteLine($"Column drag enter: target column {column.Id}");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in column drag enter: {ex.Message}");
        }
    }

    private async Task OnColumnDrop(DragEventArgs args)
    {
        try
        {
            if (dragDropModule == null) return;

            // Check if a column is being dragged
            string dragType = await dragDropModule.InvokeAsync<string>("getDragData", "dragType");
            Console.WriteLine($"OnColumnDrop: dragType={dragType}");

            if (dragType != "column")
            {
                Console.WriteLine("Not a column drag operation - ignoring");
                return;
            }

            // Get column IDs with extra validation
            int sourceId = await dragDropModule.InvokeAsync<int>("getDragData", "columnId");
            int targetId = await dragDropModule.InvokeAsync<int>("getDragData", "targetColumnId");

            // Check if returning to original position
            bool returningToOriginal = await dragDropModule.InvokeAsync<bool>("isReturningToOriginalPosition");
            if (returningToOriginal)
            {
                Console.WriteLine("Column returned to original position - canceling reordering");
                // Just clean up and return without reordering
                await dragDropModule.InvokeVoidAsync("clearDragData");
                await dragDropModule.InvokeVoidAsync("clearDragEffects");
                StateHasChanged();
                return;
            }

            Console.WriteLine($"OnColumnDrop: sourceId={sourceId}, targetId={targetId}");

            if (sourceId <= 0 || targetId <= 0 || sourceId == targetId)
            {
                Console.WriteLine("Invalid column drag parameters");
                return;
            }

            // Find columns with validation
            var sourceColumn = board?.Columns.FirstOrDefault(c => c.Id == sourceId);
            var targetColumn = board?.Columns.FirstOrDefault(c => c.Id == targetId);

            if (sourceColumn == null || targetColumn == null)
            {
                Console.WriteLine($"Could not find columns: sourceColumn={(sourceColumn == null ? "null" : "found")}, targetColumn={(targetColumn == null ? "null" : "found")}");
                return;
            }

            Console.WriteLine($"Moving column: {sourceColumn.Name} (order:{sourceColumn.Order}) to position of {targetColumn.Name} (order:{targetColumn.Order})");

            // Swap orders
            int sourceOrder = sourceColumn.Order;
            int targetOrder = targetColumn.Order;

            if (sourceOrder < targetOrder)
            {
                // Moving right - shift columns left
                Console.WriteLine($"Moving right: shifting columns between {sourceOrder} and {targetOrder}");
                foreach (var col in board.Columns.Where(c => c.Order > sourceOrder && c.Order <= targetOrder))
                {
                    Console.WriteLine($"  Shifting column {col.Name} from order {col.Order} to {col.Order - 1}");
                    col.Order--;
                }
                sourceColumn.Order = targetOrder;
            }
            else
            {
                // Moving left - shift columns right
                Console.WriteLine($"Moving left: shifting columns between {targetOrder} and {sourceOrder}");
                foreach (var col in board.Columns.Where(c => c.Order < sourceOrder && c.Order >= targetOrder))
                {
                    Console.WriteLine($"  Shifting column {col.Name} from order {col.Order} to {col.Order + 1}");
                    col.Order++;
                }
                sourceColumn.Order = targetOrder;
            }

            // Clear drag state
            await dragDropModule.InvokeVoidAsync("clearDragData");
            await dragDropModule.InvokeVoidAsync("clearDragEffects");

            // Update UI
            StateHasChanged();

            // Adjust column heights after reordering
            await dragDropModule.InvokeVoidAsync("adjustColumnHeights");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in column drop: {ex.Message}");
            await JS.InvokeVoidAsync("console.error", "Error in column drop:", ex.Message);
        }
    }

    // Task drag and drop handlers
    private async Task OnTaskDragStart(DragEventArgs args, TaskItem task)
    {
        try
        {
            // Set state for Blazor
            isDraggingColumn = false;
            dragSourceColumnId = task.ColumnId;
            dragTaskId = task.Id;

            // Log for debugging
            Console.WriteLine($"Task drag started: Task {task.Id} from column {task.ColumnId}");

            // Set state for JavaScript
            if (dragDropModule != null)
            {
                await dragDropModule.InvokeVoidAsync("setDragData", "dragType", "task");
                await dragDropModule.InvokeVoidAsync("setDragData", "taskId", task.Id);
                await dragDropModule.InvokeVoidAsync("setDragData", "sourceColumnId", task.ColumnId);

                // Add visual feedback
                await JS.InvokeVoidAsync("eval", $"document.querySelector('#task-{task.Id}').classList.add('dragging-task');");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in task drag start: {ex.Message}");
            await JS.InvokeVoidAsync("console.error", "Error in task drag start:", ex.Message);
        }
    }

    private async Task OnTaskDrop(DragEventArgs args, Column targetColumn)
    {
        try
        {
            if (dragDropModule == null) return;

            string dragType = await dragDropModule.InvokeAsync<string>("getDragData", "dragType");
            Console.WriteLine($"Task drop: dragType={dragType}");

            if (dragType != "task")
            {
                Console.WriteLine("Not a task drag operation - ignoring");
                return;
            }

            int taskId = await dragDropModule.InvokeAsync<int>("getDragData", "taskId");
            int sourceColumnId = await dragDropModule.InvokeAsync<int>("getDragData", "sourceColumnId");

            Console.WriteLine($"Task drop: taskId={taskId}, from column={sourceColumnId}, to column={targetColumn.Id}");

            if (taskId <= 0 || sourceColumnId <= 0)
            {
                Console.WriteLine("Invalid task data");
                return;
            }

            // Find the task and source column
            TaskItem draggedTask = null;
            Column sourceColumn = null;

            foreach (var col in board.Columns)
            {
                var task = col.Tasks.FirstOrDefault(t => t.Id == taskId);
                if (task != null)
                {
                    sourceColumn = col;
                    draggedTask = task;
                    break;
                }
            }

            // Skip if already in target column or not found
            if (sourceColumn == null || draggedTask == null)
            {
                Console.WriteLine($"Task {taskId} not found or source column null");
                return;
            }

            if (sourceColumn.Id == targetColumn.Id)
            {
                Console.WriteLine("Task already in target column");
                return;
            }

            Console.WriteLine($"Moving task '{draggedTask.Title}' from column '{sourceColumn.Name}' to '{targetColumn.Name}'");

            // Move the task
            sourceColumn.Tasks.Remove(draggedTask);
            draggedTask.ColumnId = targetColumn.Id;
            draggedTask.Order = targetColumn.Tasks.Any() ? targetColumn.Tasks.Max(t => t.Order) + 1 : 1;
            targetColumn.Tasks.Add(draggedTask);

            Console.WriteLine($"Task moved successfully. New column has {targetColumn.Tasks.Count} tasks.");

            // Update UI
            await InvokeAsync(() => StateHasChanged());

            // Adjust column heights after moving tasks
            if (dragDropModule != null)
            {
                await dragDropModule.InvokeVoidAsync("adjustColumnHeights");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in task drop: {ex.Message}");
            if (ex.InnerException != null)
            {
                Console.WriteLine($"Inner exception: {ex.InnerException.Message}");
            }
            await JS.InvokeVoidAsync("console.error", "Error in task drop:", ex.Message);
        }
    }

    private async Task EditColumn(Column column)
    {
        var parameters = new DialogParameters { ["column"] = column };
        var dialog = await DialogService.ShowAsync<ColumnEditDialog>("Upravit sloupec", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            // The column object is directly updated
            StateHasChanged();

            // In a real app, send update to server
            // await Http.PutAsJsonAsync($"api/columns/{column.Id}", column);
        }
    }

    private async Task OpenTaskDetail(TaskItem task)
    {
        var parameters = new DialogParameters { ["task"] = task };

        try
        {
            var dialog = await DialogService.ShowAsync<TaskDetailDialog>("Detail úkolu", parameters);
            var result = await dialog.Result;

            if (!result.Canceled)
            {
                // Update the task with the result from the dialog
                if (result.Data is TaskItem updatedTask)
                {
                    // Find and update the task
                    var column = board?.Columns.FirstOrDefault(c => c.Id == task.ColumnId);
                    if (column != null)
                    {
                        var existingTask = column.Tasks.FirstOrDefault(t => t.Id == task.Id);
                        if (existingTask != null)
                        {
                            // Update task properties
                            existingTask.Title = updatedTask.Title;
                            existingTask.Description = updatedTask.Description;
                            existingTask.DueDate = updatedTask.DueDate;
                            existingTask.Priority = updatedTask.Priority;

                            // Refresh the UI
                            StateHasChanged();

                            // Adjust column heights after task update
                            if (dragDropModule != null)
                            {
                                await dragDropModule.InvokeVoidAsync("adjustColumnHeights");
                            }
                        }
                    }
                }
                else if (result.Data is string && (string)result.Data == "delete")
                {
                    // Delete task
                    var column = board?.Columns.FirstOrDefault(c => c.Id == task.ColumnId);
                    column?.Tasks.Remove(task);

                    // Refresh UI
                    StateHasChanged();

                    // Adjust column heights after task deletion
                    if (dragDropModule != null)
                    {
                        await dragDropModule.InvokeVoidAsync("adjustColumnHeights");
                    }
                }
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.error", "Chyba při otevírání dialogu:", ex.Message);
        }
    }

    [JSInvokable]
    public static async Task<bool> MoveTaskJS(int taskId, int sourceColumnId, int targetColumnId)
    {
        Console.WriteLine($"MoveTaskJS called with taskId={taskId}, sourceColumnId={sourceColumnId}, targetColumnId={targetColumnId}");

        // You need to implement this logic to update your tasks
        // Since this is static, you might need a different approach 
        // or store a reference to your component

        return true;
    }

    private void ShowNewTaskInput(int columnId)
    {
        showNewTaskInput = true;
        newTaskColumnId = columnId;
        newTaskTitle = "";
    }

    private async Task SaveNewTask()
    {
        if (string.IsNullOrWhiteSpace(newTaskTitle) || board == null) return;

        var column = board.Columns.FirstOrDefault(c => c.Id == newTaskColumnId);
        if (column != null)
        {
            // Find max task ID across all columns
            int maxId = 0;
            foreach (var col in board.Columns)
            {
                foreach (var t in col.Tasks)
                {
                    if (t.Id > maxId) maxId = t.Id;
                }
            }

            var task = new TaskItem
                {
                    Id = maxId + 1,
                    Title = newTaskTitle,
                    Description = "",
                    ColumnId = newTaskColumnId,
                    Order = column.Tasks.Any() ? column.Tasks.Max(t => t.Order) + 1 : 1
                };

            column.Tasks.Add(task);

            // Reset UI state
            showNewTaskInput = false;
            newTaskColumnId = 0;
            newTaskTitle = "";

            // Refresh UI
            StateHasChanged();

            // Adjust column heights after adding task
            if (dragDropModule != null)
            {
                await dragDropModule.InvokeVoidAsync("adjustColumnHeights");
            }
        }
    }

    private void CancelNewTask()
    {
        showNewTaskInput = false;
        newTaskColumnId = 0;
        newTaskTitle = "";
    }

    private void ShowNewColumnInput()
    {
        showNewColumnInput = true;
        newColumnName = "";
    }

    private async Task SaveNewColumn()
    {
        if (string.IsNullOrWhiteSpace(newColumnName) || board == null) return;

        // Find max column ID
        int maxId = board.Columns.Any() ? board.Columns.Max(c => c.Id) + 1 : 1;

        var column = new Column
            {
                Id = maxId,
                Name = newColumnName,
                BoardId = Id,
                Order = board.Columns.Any() ? board.Columns.Max(c => c.Order) + 1 : 1,
                Color = "#f5f5f5", // Default color
                Tasks = new List<TaskItem>()
            };

        board.Columns.Add(column);

        showNewColumnInput = false;
        newColumnName = "";

        // Refresh UI
        StateHasChanged();

        // Adjust column heights after adding new column
        if (dragDropModule != null)
        {
            await dragDropModule.InvokeVoidAsync("adjustColumnHeights");
        }
    }

    private void CancelNewColumn()
    {
        showNewColumnInput = false;
        newColumnName = "";
    }
}